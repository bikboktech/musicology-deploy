version: "3.9"

services:
  nginx:
    container_name: nginx
    image: nginx:1.25-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/ssl:/etc/nginx/ssl:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - musicology
    depends_on:
      - frontend
  
  mysql_db:
    container_name: musicology_db
    image: mysql:8
    env_file: .env.db
    restart: unless-stopped
    command: 
      - --log_error_verbosity=1
      - --sql_mode=
    healthcheck:
      test: '/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_ROOT_PASSWORD} --execute "SHOW DATABASES;"'
      interval: 10s
      timeout: 30s
      retries: 15
    volumes:
      - ./.docker/mysql:/var/lib/mysql
    networks:
      - musicology
  
  backend:
    container_name: musicology_api
    image: ${ECR_REGISTRY}/${ECR_BREPO_NAME}:${IMAGE_TAG}
    # build: 
    #   context: ../musicology-api.pro/
    #   dockerfile: Dockerfile.BACKEND
    env_file: .env.backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    # volumes:
    #   - ../musicology-api.pro:/usr/src/app
    depends_on:
      - mysql_db
    networks:
      - musicology
  
  frontend:
    container_name: musicology_pro
    image: ${ECR_REGISTRY}/${ECR_FREPO_NAME}:${IMAGE_TAG}
    # build: 
    #   context: ../musicology.pro/
    #   dockerfile: Dockerfile.DEV
    env_file: .env.frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - musicology

networks:
  musicology:
    name: musicology
